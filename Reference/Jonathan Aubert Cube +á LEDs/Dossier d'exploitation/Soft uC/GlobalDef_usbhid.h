//-----------------------------------------------------------------------------
// GlobalDef_usbhid.h
//-----------------------------------------------------------------------------
// Copyright 2005 Silicon Laboratories, Inc.
// http://www.silabs.com
// FID:            32X000022
// Target:         C8051F32x
// Tool chain:     Keil C51 7.50 / Keil EVAL C51
// Release 1.3
// Adaptation pour modèle usbhid du cfpt : Neuhaus Jacques ( 30 juin 2010)
//----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Global Definitions usbhid, 
// Codes de commande & constantes liés aux descripteurs
//-----------------------------------------------------------------------------
#ifndef  GLOBALDEF_USBHID_H
#define  GLOBALDEF_USBHID_H

//-------------------------------
// Spécifique HID
//-------------------------------

// HID Descriptor Types	
#define DSC_HID              0x21     // HID Class Descriptor
#define DSC_HID_REPORT       0x22     // HID Report Descriptor

// Request type selector - bmRequestType
#define  DSC_CLASS           0x21     // class specific request

// HID Request Codes - for bRequest
#define GET_REPORT           0x01     // Code for Get Report
#define GET_IDLE             0x02     // Code for Get Idle
#define GET_PROTOCOL         0x03     // Code for Get Protocol
#define SET_REPORT           0x09     // Code for Set Report
#define SET_IDLE             0x0A     // Code for Set Idle
#define SET_PROTOCOL         0x0B     // Code for Set Protocol

//-------------------------------
// Général
//-------------------------------

// Standard Descriptor Types
#define DSC_DEVICE           0x01      // Device Descriptor
#define DSC_CONFIG           0x02      // Configuration Descriptor
#define DSC_STRING           0x03      // String Descriptor
#define DSC_INTERFACE        0x04      // Interface Descriptor
#define DSC_ENDPOINT         0x05      // Endpoint Descriptor

// Standard Request Codes
#define GET_STATUS           0x00      // Code for Get Status
#define CLEAR_FEATURE        0x01      // Code for Clear Feature
#define SET_FEATURE          0x03      // Code for Set Feature
#define SET_ADDRESS          0x05      // Code for Set Address
#define GET_DESCRIPTOR       0x06      // Code for Get Descriptor
#define SET_DESCRIPTOR       0x07      // Code for Set Descriptor(not used)
#define GET_CONFIGURATION    0x08      // Code for Get Configuration
#define SET_CONFIGURATION    0x09      // Code for Set Configuration
#define GET_INTERFACE        0x0A      // Code for Get Interface
#define SET_INTERFACE        0x0B      // Code for Set Interface
#define SYNCH_FRAME          0x0C      // Code for Synch Frame(not used)

// Define device states
#define DEV_ATTACHED         0x00      // Device is in Attached State
#define DEV_POWERED          0x01      // Device is in Powered State
#define DEV_DEFAULT          0x02      // Device is in Default State
#define DEV_ADDRESS          0x03      // Device is in Addressed State
#define DEV_CONFIGURED       0x04      // Device is in Configured State
#define DEV_SUSPENDED        0x05      // Device is in Suspended State

// Define bmRequestType bitmaps
#define IN_DEVICE            0x00      // Request made to device,
#define OUT_DEVICE           0x80      // Request made to device,
#define IN_INTERFACE         0x01      // Request made to interface,
#define OUT_INTERFACE        0x81      // Request made to interface,
#define IN_ENDPOINT          0x02      // Request made to endpoint,
#define OUT_ENDPOINT         0x82      // Request made to endpoint,

// Define wIndex bitmaps
#define IN_EP1               0x81      // Index values used by Set and Clear
#define OUT_EP1              0x01      // commands for Endpoint_Halt
#define IN_EP2               0x82
#define OUT_EP2              0x02

// Define wValue bitmaps for Standard Feature Selectors
#define DEVICE_REMOTE_WAKEUP 0x01     // Remote wakeup feature(not used)
#define ENDPOINT_HALT        0x00     // Endpoint_Halt feature selector

// Define Endpoint States
#define EP_IDLE              0x00      // This signifies Endpoint Idle State
#define EP_TX                0x01      // Endpoint Transmit State
#define EP_RX                0x02      // Endpoint Receive State
#define EP_HALT              0x03      // Endpoint Halt State (return stalls)
// Endpoint Stall (send procedural stall next status phase)
#define EP_STALL             0x04
// Endpoint Address (change FADDR during next status phase)
#define EP_ADDRESS           0x05

//-----------------------------------------------------------------------------
// Prototypes de fonction 
//-----------------------------------------------------------------------------

// USB Routines liées à l'ISR
extern void Usb_ISR(void);            // Determines type of USB interrupt
extern void Usb_Resume(void);         // This routine resumes USB operation
extern void Usb_Reset(void);          // Called after USB bus reset
extern void Handle_Setup(void);       // Handle setup packet on Endpoint 0
extern void Handle_In1(void);         // Handle in packet on Endpoint 1
extern void Handle_Out2(void);        // Handle out packet on Endpoint 2
extern void Usb_Suspend(void);        // This routine called when suspend

// Transfert registre interne F320 dans buffer couche USB
extern bit Fifo_Read (BYTE, unsigned int, BYTE *);	                                                
extern void Fifo_Write (BYTE, unsigned int, BYTE *);

// USB Rouitne liées à Standard Requests
extern void Get_Status(void);
extern void Clear_Feature(void);
extern void Set_Feature(void);
extern void Set_Address(void);
extern void Get_Descriptor(void);
extern void Get_Configuration(void);
extern void Set_Configuration(void);
extern void Get_Interface(void);
extern void Set_Interface(void);
extern void Force_Stall(void);  // Forces procedural stall on Endpoint 0

#endif




