C51 COMPILER V8.12   F320_FLASHUTILS                                                       05/08/2012 17:12:55 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE F320_FLASHUTILS
OBJECT MODULE PLACED IN F320_FlashUtils.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Lib\F320_FlashUtils.c OPTIMIZE(3,SPEED) BROWSE INCDIR(.\Header;.\Lib) DEBUG
                    - OBJECTEXTEND PRINT(.\F320_FlashUtils.lst) TABS(3) OBJECT(F320_FlashUtils.obj)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F320_FlashUtils.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2004 Silicon Laboratories, Inc.
   5          //
   6          // This program contains several useful utilities for writing and updating
   7          // FLASH memory.
   8          //
   9          // AUTH: BW & GP
  10          // DATE: 21 JUL 04
  11          //
  12          // Target: C8051F32x
  13          // Tool chain: KEIL C51 7.06
  14          //
  15          // Release 1.1
  16          // 1/30/2006
  17          // Fixed function header for Flash_Write()
  18          //
  19          // Release 1.0
  20          //
  21          
  22          //-----------------------------------------------------------------------------
  23          // Includes
  24          //-----------------------------------------------------------------------------
  25          
  26          #include "F320_FlashPrimitives.h"
  27          #include "F320_FlashUtils.h"
  28          
  29          //-----------------------------------------------------------------------------
  30          // Structures, Unions, Enumerations, and Type Definitions
  31          //-----------------------------------------------------------------------------
  32          
  33          //-----------------------------------------------------------------------------
  34          // Global Constants
  35          //-----------------------------------------------------------------------------
  36          
  37          //-----------------------------------------------------------------------------
  38          // Function Prototypes
  39          //-----------------------------------------------------------------------------
  40          
  41          // FLASH read/write/erase routines
  42          void FLASH_Write (FLADDR dest, char *src, unsigned numbytes);
  43          char * FLASH_Read (char *dest, FLADDR src, unsigned numbytes);
  44          void FLASH_Clear (FLADDR addr, unsigned numbytes);
  45          
  46          // FLASH update/copy routines
  47          void FLASH_Update (FLADDR dest, char *src, unsigned numbytes);
  48          void FLASH_Copy (FLADDR dest, FLADDR src, unsigned numbytes);
  49          
  50          // FLASH test routines
  51          void FLASH_Fill (FLADDR addr, ULONG length, UCHAR fill);
  52          
  53          //-----------------------------------------------------------------------------
  54          // Global Variables
C51 COMPILER V8.12   F320_FLASHUTILS                                                       05/08/2012 17:12:55 PAGE 2   

  55          //-----------------------------------------------------------------------------
  56          
  57          //-----------------------------------------------------------------------------
  58          // FLASH Routines
  59          //-----------------------------------------------------------------------------
  60          
  61          //-----------------------------------------------------------------------------
  62          // FLASH_Clear
  63          //-----------------------------------------------------------------------------
  64          //
  65          // This routine erases <numbytes> starting from the FLASH addressed by
  66          // <dest> by performing a read-modify-write operation using <FLASH_TEMP> as
  67          // a temporary holding area.  This function accepts <numbytes> up to
  68          // <FLASH_PAGESIZE>.
  69          //
  70          void FLASH_Clear (FLADDR dest, unsigned numbytes)
  71          {
  72   1         FLADDR dest_1_page_start;           // first address in 1st page
  73   1                                             // containing <dest>
  74   1         FLADDR dest_1_page_end;             // last address in 1st page
  75   1                                             // containing <dest>
  76   1         FLADDR dest_2_page_start;           // first address in 2nd page
  77   1                                             // containing <dest>
  78   1         FLADDR dest_2_page_end;             // last address in 2nd page
  79   1                                             // containing <dest>
  80   1         unsigned numbytes_remainder;        // when crossing page boundary,
  81   1                                             // number of <src> bytes on 2nd page
  82   1         unsigned FLASH_pagesize;            // size of FLASH page to update
  83   1      
  84   1         FLADDR  wptr;                       // write address
  85   1         FLADDR  rptr;                       // read address
  86   1      
  87   1         unsigned length;
  88   1      
  89   1         FLASH_pagesize = FLASH_PAGESIZE;
  90   1      
  91   1         dest_1_page_start = dest & ~(FLASH_pagesize - 1);
  92   1         dest_1_page_end = dest_1_page_start + FLASH_pagesize - 1;
  93   1         dest_2_page_start = (dest + numbytes)  & ~(FLASH_pagesize - 1);
  94   1         dest_2_page_end = dest_2_page_start + FLASH_pagesize - 1;
  95   1      
  96   1         if (dest_1_page_end == dest_2_page_end) {
  97   2      
  98   2            // 1. Erase Scratch page
  99   2            FLASH_PageErase (FLASH_TEMP);
 100   2      
 101   2            // 2. Copy bytes from first byte of dest page to dest-1 to Scratch page
 102   2      
 103   2            wptr = FLASH_TEMP;
 104   2            rptr = dest_1_page_start;
 105   2            length = dest - dest_1_page_start;
 106   2            FLASH_Copy (wptr, rptr, length);
 107   2      
 108   2            // 3. Copy from (dest+numbytes) to dest_page_end to Scratch page
 109   2      
 110   2            wptr = FLASH_TEMP + dest - dest_1_page_start + numbytes;
 111   2            rptr = dest + numbytes;
 112   2            length = dest_1_page_end - dest - numbytes + 1;
 113   2            FLASH_Copy (wptr, rptr, length);
 114   2      
 115   2            // 4. Erase destination page
 116   2            FLASH_PageErase (dest_1_page_start);
C51 COMPILER V8.12   F320_FLASHUTILS                                                       05/08/2012 17:12:55 PAGE 3   

 117   2      
 118   2            // 5. Copy Scratch page to destination page
 119   2            wptr = dest_1_page_start;
 120   2            rptr = FLASH_TEMP;
 121   2            length = FLASH_pagesize;
 122   2            FLASH_Copy (wptr, rptr, length);
 123   2      
 124   2         } else {                            // value crosses page boundary
 125   2            // 1. Erase Scratch page
 126   2            FLASH_PageErase (FLASH_TEMP);
 127   2      
 128   2            // 2. Copy bytes from first byte of dest page to dest-1 to Scratch page
 129   2      
 130   2            wptr = FLASH_TEMP;
 131   2            rptr = dest_1_page_start;
 132   2            length = dest - dest_1_page_start;
 133   2            FLASH_Copy (wptr, rptr, length);
 134   2      
 135   2            // 3. Erase destination page 1
 136   2            FLASH_PageErase (dest_1_page_start);
 137   2      
 138   2            // 4. Copy Scratch page to destination page 1
 139   2            wptr = dest_1_page_start;
 140   2            rptr = FLASH_TEMP;
 141   2            length = FLASH_pagesize;
 142   2            FLASH_Copy (wptr, rptr, length);
 143   2      
 144   2            // now handle 2nd page
 145   2      
 146   2            // 5. Erase Scratch page
 147   2            FLASH_PageErase (FLASH_TEMP);
 148   2      
 149   2            // 6. Copy bytes from numbytes remaining to dest-2_page_end to Scratch page
 150   2      
 151   2            numbytes_remainder = numbytes - (dest_1_page_end - dest + 1);
 152   2            wptr = FLASH_TEMP + numbytes_remainder;
 153   2            rptr = dest_2_page_start + numbytes_remainder;
 154   2            length = FLASH_pagesize - numbytes_remainder;
 155   2            FLASH_Copy (wptr, rptr, length);
 156   2      
 157   2            // 7. Erase destination page 2
 158   2            FLASH_PageErase (dest_2_page_start);
 159   2      
 160   2            // 8. Copy Scratch page to destination page 2
 161   2            wptr = dest_2_page_start;
 162   2            rptr = FLASH_TEMP;
 163   2            length = FLASH_pagesize;
 164   2            FLASH_Copy (wptr, rptr, length);
 165   2         }
 166   1      }
 167          
 168          
 169          //-----------------------------------------------------------------------------
 170          // FLASH_Update
 171          //-----------------------------------------------------------------------------
 172          //
 173          // This routine replaces <numbytes> from <src> to the FLASH addressed by
 174          // <dest>.  This function calls FLASH_Clear() to handle the dirty work of
 175          // initializing all <dest> bytes to 0xff's prior to copying the bytes from
 176          // <src> to <dest>. This function accepts <numbytes> up to <FLASH_PAGESIZE>.
 177          //
 178          void FLASH_Update (FLADDR dest, char *src, unsigned numbytes)
C51 COMPILER V8.12   F320_FLASHUTILS                                                       05/08/2012 17:12:55 PAGE 4   

 179          {
 180   1         // 1. Erase <numbytes> starting from <dest>
 181   1         FLASH_Clear (dest, numbytes);
 182   1      
 183   1         // 2. Write <numbytes> from <src> to <dest>
 184   1         FLASH_Write (dest, src, numbytes);
 185   1      }
 186          
 187          
 188          //-----------------------------------------------------------------------------
 189          // FLASH_Write
 190          //-----------------------------------------------------------------------------
 191          //
 192          // This routine copies <numbytes> from <src> to the linear FLASH address
 193          // <dest>.
 194          //
 195          void FLASH_Write (FLADDR dest, char *src, unsigned numbytes)
 196          {
 197   1         FLADDR i;
 198   1      
 199   1         for (i = dest; i < dest+numbytes; i++) {
 200   2            FLASH_ByteWrite (i, *src++);
 201   2         }
 202   1      }
 203          
 204          //-----------------------------------------------------------------------------
 205          // FLASH_Read
 206          //-----------------------------------------------------------------------------
 207          //
 208          // This routine copies <numbytes> from the linear FLASH address <src> to
 209          // <dest>.
 210          //
 211          char * FLASH_Read (char *dest, FLADDR src, unsigned numbytes)
 212          {
 213   1         FLADDR i;
 214   1      
 215   1         for (i = 0; i < numbytes; i++) {
 216   2            *dest++ = FLASH_ByteRead (src+i);
 217   2         }
 218   1         return dest;
 219   1      }
 220          
 221          //-----------------------------------------------------------------------------
 222          // FLASH_Copy
 223          //-----------------------------------------------------------------------------
 224          //
 225          // This routine copies <numbytes> from <src> to the linear FLASH address
 226          // <dest>.
 227          //
 228          // To do:
 229          //  -- optimize to skip 0xFF bytes
 230          //
 231          void FLASH_Copy (FLADDR dest, FLADDR src, unsigned numbytes)
 232          {
 233   1         FLADDR i;
 234   1      
 235   1         for (i = 0; i < numbytes; i++) {
 236   2      
 237   2            FLASH_ByteWrite ((FLADDR) dest+i, FLASH_ByteRead((FLADDR) src+i));
 238   2         }
 239   1      }
 240          
C51 COMPILER V8.12   F320_FLASHUTILS                                                       05/08/2012 17:12:55 PAGE 5   

 241          
 242          //-----------------------------------------------------------------------------
 243          // FLASH_Fill
 244          //-----------------------------------------------------------------------------
 245          //
 246          // This routine fills the FLASH beginning at <addr> with <lenght> bytes.
 247          //
 248          void FLASH_Fill (FLADDR addr, ULONG length, UCHAR fill)
 249          {
 250   1         FLADDR i;
 251   1      
 252   1         for (i = 0; i < length; i++) {
 253   2            FLASH_ByteWrite (addr+i, fill);
 254   2         }
 255   1      }
 256          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    808    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      64
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
