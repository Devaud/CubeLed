C51 COMPILER V8.12   F32X_USB_PRIMITIVES                                                   06/12/2012 19:56:16 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE F32X_USB_PRIMITIVES
OBJECT MODULE PLACED IN F32x_USB_Primitives.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE F32x_USB_Primitives.c OPTIMIZE(3,SPEED) BROWSE INCDIR(.\Header;.\Lib) DEBUG
                    - OBJECTEXTEND TABS(3)

line level    source

   1          /*===========================================================================*=
   2             CFP - Technique - Primitives (implémentation d'une communication HID 
   3             Auteur        : Silicon Laboratories, Inc.
   4             Adaption      : Neuhaus J.  
   5             Date création : 13 avril 2010
   6             Modifié le    : 20 juin 2010 - 15:28
   7             Version       : 1.0
   8            =============================================================================
   9             Descriptif: Exploitation du bus USB en version HID (mode interrupt) 
  10                         Dérivé du firmware pour le kit 8051F320, copyright 2005 
  11                         Silicon Laboratories, Inc. (http://www.silabs.com)
  12             
  13                         Release 1.3
  14              
  15                         Communication via 2 Pipes (In & Out) en mode interrupt.
  16                         Dispositif HID propriétaire.
  17             
  18                         USAGE simple composé d'une paquet de données de 64 bytes en 
  19                         sortie est d'un paquet 64 bytes en entrée.
  20             
  21                         L'interruption de l'usb est bloquée pendant l'actualisation 
  22                         des buffers afin de maintenir la cohérence des données dans 
  23                         la trame.         
  24          =*===========================================================================*/
  25          
  26          //--- Includes ----------------------------------------------------------------
  27          #include <c8051f320.h>
  28          
  29          #include "F32x_USB_Primitives.h"
  30          #include "F32x_USB_Register.h"
  31          
  32          //--- Prototypes fonctions
  33          void Delay();
  34          
  35          //--- Buffer de données de l'application
  36          xdata BYTE ReceiveDataBuffer[EP2_PACKET_SIZE];  // Buffer données reçues
  37          xdata BYTE SendDataBuffer[EP1_PACKET_SIZE];     // Buffer données à envoyer
  38          
  39          //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//
  40          //       ROUTINES D'INITIALISATION SYSTEME POUR USB issues du firmware       //
  41          //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//
  42          
  43          /*---------------------------------------------------------------------------*-
  44             Write_send_Packet ()
  45            -----------------------------------------------------------------------------
  46             Descriptif: Copie les données à transmettre dans le buffer de transmission 
  47             Entrée    : ptrData, pointeur sur le buffer de données de l'application
  48                         size, taille du buffer 
  49             Sortie    : --
  50          -*---------------------------------------------------------------------------*/
  51          void Write_send_Packet (char *ptrData, unsigned int size) 
  52          {
  53   1         //--- Variables locales ----------------------------------------------------
  54   1         int i;
C51 COMPILER V8.12   F32X_USB_PRIMITIVES                                                   06/12/2012 19:56:16 PAGE 2   

  55   1         //--------------------------------------------------------------------------
  56   1      
  57   1         EIE1 &= ~EUSB0;    //Verrouille l'USB pendant l'actualisation des données
  58   1      
  59   1         //Copie les données dans le buffer de transmission
  60   1         for(i=0; i<size; i++)
  61   1           In_Packet[i] = *(ptrData + i);
  62   1      
  63   1         EIE1 |= EUSB0;    //Libère l'USB 
  64   1      
  65   1      } // Write_send_Packet --------------------------------------------------------
  66          
  67          /*---------------------------------------------------------------------------*-
  68             Read_receive_Packet ()
  69            -----------------------------------------------------------------------------
  70             Descriptif: Copie les données à reçues du buffer de réception 
  71             Entrée    : ptrData, pointeur sur le buffer de données de l'application
  72                         size, taille du buffer 
  73             Sortie    : --
  74          -*---------------------------------------------------------------------------*/
  75          void Read_receive_Packet (char *ptrData, unsigned int size) 
  76          {
  77   1         //--- Variables locales ----------------------------------------------------
  78   1         int i;
  79   1         //--------------------------------------------------------------------------
  80   1      
  81   1         EIE1 &= ~EUSB0;    //Verrouille l'USB pendant l'actualisation des données
  82   1      
  83   1         //Copie les données du buffer de réception
  84   1         for(i=0; i<size; i++)
  85   1           *(ptrData + i) = Out_Packet[i];
  86   1      
  87   1         EIE1 |= EUSB0;    //Libère l'USB 
  88   1      
  89   1      } // Read_receive_Packet ------------------------------------------------------
  90          
  91          //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//
  92          //       ROUTINES D'INITIALISATION SYSTEME POUR USB issues du firmware       //
  93          //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//
  94          
  95          /*---------------------------------------------------------------------------*-
  96             Sysclk_Init ()
  97            -----------------------------------------------------------------------------
  98             Descriptif: Initialisation du clock système & usb 
  99             Entrée    : --
 100             Sortie    : --
 101          -*---------------------------------------------------------------------------*/
 102          void Sysclk_Init()
 103          {
 104   1      #ifdef _USB_LOW_SPEED_
              
                 OSCICN |= 0x03;                     // Configure internal oscillator for
                                                     // its maximum frequency and enable
                                                     // missing clock detector
              
                 CLKSEL  = SYS_INT_OSC;              // Select System clock
                 CLKSEL |= USB_INT_OSC_DIV_2;        // Select USB clock
              #else
 113   1         OSCICN |= 0x03;                     // Configure internal oscillator for
 114   1                                             // its maximum frequency and enable
 115   1                                             // missing clock detector
 116   1      
C51 COMPILER V8.12   F32X_USB_PRIMITIVES                                                   06/12/2012 19:56:16 PAGE 3   

 117   1         CLKMUL  = 0x00;                     // Select internal oscillator as
 118   1                                             // input to clock multiplier
 119   1      
 120   1         CLKMUL |= 0x80;                     // Enable clock multiplier
 121   1         Delay();                            // Delay for clock multiplier to begin
 122   1         CLKMUL |= 0xC0;                     // Initialize the clock multiplier
 123   1         Delay();                            // Delay for clock multiplier to begin
 124   1      
 125   1         while(!(CLKMUL & 0x20));            // Wait for multiplier to lock
 126   1      //   CLKSEL  = SYS_INT_OSC;              // Select system clock
 127   1      
 128   1         CLKSEL  = SYS_4X_DIV_2;             // Select system clock     <-- Tuned
 129   1         CLKSEL |= USB_4X_CLOCK;             // Select USB clock
 130   1      #endif  /* _USB_LOW_SPEED_ */
 131   1      
 132   1      } // Sysclk_Init --------------------------------------------------------------
 133          
 134          /*---------------------------------------------------------------------------*-
 135             Usb0_Init ()
 136            -----------------------------------------------------------------------------
 137             Descriptif: Initialisation de l'USB0
 138                      - USB0 interrupts autorisé
 139                      - USB0 transceiver autorisé
 140                      - USB0 avec détection du mode suspendu autorisé     
 141             Entrée    : --
 142             Sortie    : --
 143          -*---------------------------------------------------------------------------*/
 144          void Usb0_Init()
 145          {
 146   1         BYTE Count;
 147   1      
 148   1         // Set initial values of In_Packet and Out_Packet to zero
 149   1         // Initialized here so that WDT doesn't kick in first
 150   1         for (Count = 0; Count < 64; Count++)
 151   1         {
 152   2            Out_Packet[Count] = 0;
 153   2            In_Packet[Count] = 0;
 154   2         }
 155   1      
 156   1         POLL_WRITE_BYTE(POWER,  0x08);      // Force Asynchronous USB Reset
 157   1         POLL_WRITE_BYTE(IN1IE,  0x07);      // Enable Endpoint 0-2 in interrupts
 158   1         POLL_WRITE_BYTE(OUT1IE, 0x07);      // Enable Endpoint 0-2 out interrupts
 159   1         POLL_WRITE_BYTE(CMIE,   0x07);      // Enable Reset,Resume,Suspend interrupts
 160   1      
 161   1      #ifdef _USB_LOW_SPEED_
                 USB0XCN = 0xC0;                     // Enable transceiver; select low speed
                 POLL_WRITE_BYTE(CLKREC, 0xA0);      // Enable clock recovery; single-step mode
                                                      // disabled; low speed mode enabled
              #else
 166   1         USB0XCN = 0xE0;                     // Enable transceiver; select full speed
 167   1         POLL_WRITE_BYTE(CLKREC, 0x80);      // Enable clock recovery, single-step mode
 168   1                                             // disabled
 169   1      #endif // _USB_LOW_SPEED_
 170   1      
 171   1         EIE1 |= 0x02;                       // Enable USB0 Interrupts
 172   1         EA = 1;                             // Global Interrupt enable
 173   1                                             // Enable USB0 by clearing the USB 
 174   1                                             // Inhibit bit
 175   1         POLL_WRITE_BYTE(POWER,  0x01);      // and enable suspend detection
 176   1      } // Usb0_Init ----------------------------------------------------------------
 177          
 178          /*---------------------------------------------------------------------------*-
C51 COMPILER V8.12   F32X_USB_PRIMITIVES                                                   06/12/2012 19:56:16 PAGE 4   

 179             Delay ()
 180            -----------------------------------------------------------------------------
 181             Descriptif: Delay pour les phases d'initialisation de l'usb 
 182                           ~80us en full speed
 183                           ~1ms  en low speed
 184             Entrée    : --
 185             Sortie    : --
 186          -*---------------------------------------------------------------------------*/
 187          void Delay()
 188          {
 189   1         //--- Variables locales ----------------------------------------------------
 190   1         int x;
 191   1         //--------------------------------------------------------------------------
 192   1      
 193   1         for(x = 0;x < 500;x) x++;
 194   1      
 195   1      } // Delay --------------------------------------------------------------------
 196          
 197          
 198          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    315    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    128    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
