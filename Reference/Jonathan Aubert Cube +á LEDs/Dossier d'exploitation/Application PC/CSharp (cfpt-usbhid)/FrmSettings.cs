using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace Cubizator
{
    public partial class FrmSettings : Form
    {

        //--- Champs -----------------------------------------
        private int nb_images;      //NB d'images
        private int t_images;       //Valeur du temps 
        private int luminosité;     //Luminosité
        private int mode_lum;   //mode de luminosité 0 = default, 1 = fixée, 2 = variable.
        private const string str_champ_vide = "Un des champs est vide, veuillez le remplir!";
        private const string str_champ_bad_val = "Erreur: La valeur des champs (Nombre d'images et T/image) doit être différente de 0!";
        private const string str_frm_txt_default = "Réglages";
        //----------------------------------------------------

        //--- Constructeurs par défaut ------------------------
        public FrmSettings()
        {
            InitializeComponent();
            this.nb_images = Classcube.get_nb_image_default();
            this.t_images = Classcube.get_t_image_default();
            this.luminosité = Classcube.get_lum_default();
            this.Text = str_frm_txt_default;
            this.mode_lum = 0;
        }

        //--- Constructeurs (Surcharge) ----------------------
        public FrmSettings(int nb_image, int t_image, int luminosité, int mode_lum, string str_frm_text)
        {
            InitializeComponent();
            this.Text = str_frm_text;
            this.mode_lum = mode_lum;
            this.t_images = t_image;
            this.nb_images = nb_image;
            this.luminosité = luminosité;   //Enregistrement des valeurs de surcharge
        }


        //--- Accesseurs -------------------------------------
        //--- Propriétés -------------------------------------
        public int T_images
        {
            get { return this.t_images; }
            set
            {
                this.t_images = value;
            }
        }

        public int Nb_images
        {
            get { return this.nb_images; }
            set
            {
                this.nb_images = value;
            }
        }


        public int Luminosité
        {
            get { return this.luminosité; }
            set
            {
                this.luminosité = value;
            }
        }


        public int Mode_lum
        {
            get { return this.mode_lum; }
            set
            {
                this.mode_lum = value;
            }
        } 



        //--- Méthodes private ----------------------------------
        private void tBar_lum_Scroll(object sender, EventArgs e)
        {
            luminosité = tBar_lum.Value;    
            txtbox_lum.Text = luminosité.ToString();    //Modification de la valeur de la txtbox
        }

        private void txtbox_lum_TextChanged(object sender, EventArgs e)
        {
            try
            {
                luminosité = int.Parse(txtbox_lum.Text);    //Enregistrement de la valeur entrée
                tBar_lum.Value = luminosité;    //Modification de la trackbar
            }
            catch
            {
               // txtbox_lum.Text = luminosité.ToString();    //Affichage de la luminosité actuelle
            }
        }

        private void rB_lum_fixe_CheckedChanged(object sender, EventArgs e)
        {
            mode_lum = 1;   //mode de commande luminosité = 1
            tBar_lum.Enabled = true;
            txtbox_lum.Enabled = true;  //Activation de la txtbox et trackbar
        }

        private void rB_lum_var_CheckedChanged(object sender, EventArgs e)
        {
            mode_lum = 2;   //mode de commande luminosité = 2
            tBar_lum.Enabled = false;
            txtbox_lum.Enabled = false;  //Désctivation de la txtbox et trackbar
        }

        private void rB_Lum_defaut_CheckedChanged(object sender, EventArgs e)
        {
            mode_lum = 0;   //mode de commande luminosité = 0
            luminosité = Classcube.get_lum_default();   //La luminosité est remise par défaut
            txtbox_lum.Text = luminosité.ToString();    //Mise à jour du champ de la textbox
            tBar_lum.Enabled = false;
            txtbox_lum.Enabled = false;  //Désctivation de la txtbox et trackbar
        }

        private void btn_ok_Click(object sender, EventArgs e)
        {
            try
            {
                nb_images = int.Parse(txtboxnb_image.Text); //Tentative d'enregistrement des champs
                t_images = int.Parse(txtboxT_images.Text);

                if ((nb_images != 0) && (t_images != 0))    //Si les données sont vraies
                {
                    this.DialogResult = DialogResult.OK;    //retourne OK
                    this.Close();   //Ferme la frm
                }
                else
                {
                    MessageBox.Show(str_champ_bad_val);    //Avertissement de l'utilisateur mauvaise valeur
                }
            }
            catch
            {
                MessageBox.Show(str_champ_vide);    //Avertissement de l'utilisateur un champ est vide
            }

        }

        private void btn_annuler_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.Cancel;    //retourne cancel
            this.Close();   //fermeture de la frm 
        }

        private void FrmSettings_Load(object sender, EventArgs e)
        {
            txtboxnb_image.Text = nb_images.ToString(); //Affichage du nombre d'images
            txtboxT_images.Text = t_images.ToString();  //Affichage de la valeur du T/image
            tBar_lum.Value = luminosité;    //affichage de la luminosité
            txtbox_lum.Text = luminosité.ToString();

            switch (mode_lum)   //Selon le mode choisi, cochage du bon radioboutton!
            {
                case 0: rB_Lum_defaut.Checked = true;
                    break;
                case 1: rB_lum_fixe.Checked = true;
                    break;
                case 2: rB_lum_var.Checked = true;
                    break;
            }
        }

     
        private void txtbox_KeyDown(object sender, KeyEventArgs e)  //Filtrage des touches
        {
            if (!(((e.KeyCode >= Keys.D0) && (e.KeyCode <= Keys.D9)) || ((e.KeyCode >= Keys.NumPad0) && (e.KeyCode <= Keys.NumPad9)) || (Keys.Right.Equals(e.KeyCode)) || (Keys.Left.Equals(e.KeyCode)) || (Keys.Back.Equals(e.KeyCode)) || (Keys.Delete.Equals(e.KeyCode))))      //Si touche invalide
            {
                e.SuppressKeyPress = true;  //touche sans effet
            }
        }

        private void txtbox_lum_Validated(object sender, EventArgs e)
        {
            if (txtbox_lum.Text == "")  //Si le textbox est vide
            {
                luminosité = 0;         //Mise à 0 de la luminosité
                txtbox_lum.Text = luminosité.ToString();    //Ecriture dans textbox     
            }
            else if (int.Parse(txtbox_lum.Text) > 100)      //Sinon, si la valeur de lum est trop grande,
            {
                luminosité = 100;         //Mise à 0 de la luminosité
                txtbox_lum.Text = luminosité.ToString();    //Ecriture dans textbox 
            }
        }


    }   
}
