using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Cubizator
{
    class Classcube
    {

        //--- Champs -----------------------------------------
       
        public byte[,,] datacube;
        public int[] img_lum;  //Est utilisé en cas de luminosité variable
        private int nbimages;
        private int t_image;
        private int luminosité; //Utilisé en cas de luminosité par défaut ou fixée!
        private int mode_lum;   //Correspond au mode de gestion de la luminosité (0 = par défaut, 1 = fixée, 2 = variable).
        private const int nbimage_default = 8;
        private const int t_image_default = 300;
        private const int luminosité_default = 100;
        private const int mode_lum_default = 0;

        //--- Constructeurs par défaut ------------------------
        public Classcube()
        {
            this.nbimages = nbimage_default;
            this.t_image = t_image_default;
            this.luminosité = luminosité_default;
            this.mode_lum = mode_lum_default;
            //création du tableau de bytes
            this.datacube = new byte[8, 8, this.nbimages];   
        }

        //--- Constructeurs (Surcharge) ----------------------
        public Classcube(int nb_images, int t_image, int luminosité, int mode_lum)
        {
            this.mode_lum = mode_lum;
            this.nbimages = nb_images;
            this.t_image = t_image;
            this.luminosité = luminosité;
            this.datacube = new byte[8, 8, this.nbimages];  //création du tableau de bytes pour images
            this.img_lum = new int[this.nbimages];         //création du tableau de bytes pour la gestion de luminosité (si mode variable)
            for(int i = 0;i<this.nbimages;i++)
            {
                this.img_lum[i] = this.luminosité;      //initialisation du tableau luminosité
            }
        }

        //--- Accesseurs -------------------------------------

        //--- Propriétés ------------------------------------
        public int NB_images
        {
            get { return this.nbimages; }
            set
            {
                this.nbimages = value;
            }
        }


        public int T_image
        {
            get { return this.t_image; }
            set
            {
                this.t_image = value;
            }
        }

        public int Luminosité
        {
            get { return this.luminosité; }
            set
            {
                this.luminosité = value;
            }
        }

        public int Mode_lum
        {
            get { return this.mode_lum; }
            set
            {
                this.mode_lum = value;
            }
        }
        

        //--- Méthodes private ----------------------------------

        //--- Méthodes ------------------------------------------

        //Pour envoyer une image avec le formatage de trame par usb!
        //(les lignes sont balayées de la 0 à 7, puis passage à l'étage supérieur et l'opération recommence)
        public byte[] send_image(int image) 
        {
            int k = 1;                      //Première donnée sera la première du bufOut usb
            byte[] buff_out = new byte[65];         //Données pour l'usb

            for (int i = 0; i < 8; i++)             //envoie l'image 3D au cube
                for (int j = 0; j < 8; j++)
                {
                    buff_out[k] = this.datacube[j, i, image];   //transfert des données du cube dans le buffer
                    k++;
                }

            return buff_out;    //retourne le buffer
           
        }

        


        //--- Surcharge d'opérateur -----------------------------
        //--- Méthodes statique de la classe --------------------
        public static int get_nb_image_default()
        {
            return nbimage_default;
        }

        public static int get_t_image_default()
        {
            return t_image_default;
        }

        public static int get_lum_default()
        {
            return luminosité_default;
        }

        public static int get_mode_lum_default()
        {
            return mode_lum_default;
        }
    }
}
